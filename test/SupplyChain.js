const SupplyChain = artifacts.require("./SupplyChain.sol");

var accounts;
var owner;

contract("SupplyChain", accounts => {
  
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
      const supplyChain = await SupplyChain.deployed()
      
      // Add a Farmer
      await supplyChain.addFarmer(originFarmerID)
      
      // Declare and Initialize a variable for event
      // var eventEmitted = false
      
      // // Watch the emitted event Harvested()
      // var event = supplyChain.Harvested()
      // await event.watch((err, res) => {
      //     eventEmitted = true
      // })

      // Mark an item as Harvested by calling function harvestItem()
      await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
      assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
      assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
      assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
      assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
      assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
      assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
      // assert.equal(eventEmitted, true, 'Invalid event emitted')        
  })  
});
